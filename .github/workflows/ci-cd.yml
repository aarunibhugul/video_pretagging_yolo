# .github/workflows/main.yml

name: Video Pre-Tagging MLOps Pipeline CI/CD

# Define when this workflow should run
on:
  push:
    branches:
      - main # Run on every push to the main branch
  pull_request:
    branches:
      - main # Run on every pull request targeting the main branch
  workflow_dispatch: # Allows you to manually trigger the workflow from GitHub UI
    inputs:
      video_name:
        description: 'Name of the sample video file (e.g., sample.mp4)'
        required: true
        default: 'sample_video.mp4' # Default if manually triggered

jobs:
  build-and-run-pipeline:
    runs-on: ubuntu-latest # Use a standard Ubuntu runner provided by GitHub

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Action to get your repository's code onto the runner

      - name: Set up Docker BuildX (for better Docker builds)
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        # This command builds your image based on the Dockerfile in the current directory.
        # It tags it as 'video-pipeline:latest'.
        run: docker build -t video-pipeline .


      - name: Run pipeline Docker container
        # This command runs your Docker container.
        # -v: mounts local directories into the container.
        #     - We mount a local 'input_data' directory to '/app/input' inside the container.
        #     - We mount a local 'pipeline_output' directory to '/app/output_data' inside the container.
        # --video_path: passes the path to the video INSIDE THE CONTAINER.
        # --output_dir: passes the path to the output directory INSIDE THE CONTAINER.
        run: |
          mkdir -p pipeline_output # Create the host output directory
          docker run \
            -v $(pwd)/input_files:/app/input \
            -v $(pwd)/pipeline_output:/app/output_data \
            video-pipeline \
            --video_path /app/input/${{ github.event.inputs.video_name || 'sample_video.mp4' }} \
            --output_dir /app/output_data
       # env:

      #  pass

      - name: Validate Pipeline Outputs
        id: validate_outputs
        run: |
          OUTPUT_DIR="pipeline_output/frames" # Matches DEFAULT_FRAME_OUTPUT_DIR from config.py and mount
          COCO_FILE="pipeline_output/detections.json" # Matches DEFAULT_COCO_OUTPUT_PATH

          echo "Checking for output directory: $OUTPUT_DIR"
          if [ -d "$OUTPUT_DIR" ]; then
            echo "Output frames directory exists."
            NUM_FRAMES=$(ls -1 "$OUTPUT_DIR"/*.jpg | wc -l)
            echo "Number of frames found: $NUM_FRAMES"
            if [ "$NUM_FRAMES" -gt 0 ]; then
              echo "✅ Frames were extracted successfully."
            else
              echo "❌ No frames found in the output directory."
              exit 1 # Fail the step
            fi
          else
            echo "❌ Output frames directory '$OUTPUT_DIR' does not exist."
            exit 1 # Fail the step
          fi

          echo "Checking for COCO JSON file: $COCO_FILE"
          if [ -f "$COCO_FILE" ]; then
            echo "COCO JSON file exists."
            # Basic check to ensure it's not empty or malformed JSON
            if [ -s "$COCO_FILE" ]; then # -s checks if file has size greater than 0
              echo "COCO JSON file is not empty."
              # More robust JSON validation could be added here (e.g., using 'jq' or a python script)
              # For example: python -c "import json; open('$COCO_FILE').read()"
              echo "✅ COCO JSON file generated successfully."
            else
              echo "❌ COCO JSON file is empty."
              exit 1 # Fail the step
            fi
          else
            echo "❌ COCO JSON file '$COCO_FILE' does not exist."
            exit 1 # Fail the step
          fi

      - name: Run Unit Tests
        run: |
          pip install pytest # Ensure pytest is available in the runner
          pytest src/tests/ # Assuming your tests are in src/tests/
        # Or if running inside the Docker container (which is often better for consistency):
        # docker run --rm -v $(pwd)/src:/app/src video-pipeline sh -c "pip install pytest && pytest /app/src/tests"